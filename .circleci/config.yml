version: 2.1

executors:
  ubuntu-executor:
    docker:
      - image: cimg/base:stable

jobs:
  trigger-circleci:
    executor: ubuntu-executor
    steps:
      - checkout

      - run:
          name: Find the Commit that Triggered Workflow
          command: |
            echo "Commit Hash: $CIRCLE_SHA1"

      - run:
          name: List Modified Files
          command: |
            # TODO - Use the actual commit hash
            CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r fc06baa46857ad7cfa1d5c774cbef96549cf1eee | grep "^mirrors/")
            echo "Files changed in commit:"
            echo "$CHANGED_FILES"
            echo "CHANGED_FILES=$CHANGED_FILES" >> $BASH_ENV

      - run:
          name: Display File Contents
          environment:
            CIRCLECI_API_TOKEN: $CIRCLECI_API_TOKEN
          command: |
            echo "Showing contents of modified files:"
            for file in $CHANGED_FILES; do
              if [ -f "$file" ]; then
                echo "=============================="
                echo "File: $file"
                cat "$file"
                name=$(jq -r '.name' "$file")
                url=$(jq -r '.url' "$file")
                branch=$(jq -r '.buildCommands.branchName // ""' "$file")
                build_dir=$(jq -r '.buildCommands.buildDir // ""' "$file")
                output_dir=$(jq -r '.buildCommands.outputDir // ""' "$file")
                package_install_command=$(jq -r '.buildCommands.packageInstallCommand // ""' "$file")
                build_command=$(jq -r '.buildCommands.buildCommand // ""' "$file")
                environment_variables=$(jq -r '.buildCommands.environmentVariables // ""' "$file")
                type=$(jq -r '.type // ""' "$file")
                
                echo "export url=\"$url\"" >> $BASH_ENV
                echo "export branch=\"$branch\"" >> $BASH_ENV
                echo "export build_dir=\"$build_dir\"" >> $BASH_ENV
                echo "export output_dir=\"$output_dir\"" >> $BASH_ENV
                echo "export package_install_command=\"$package_install_command\"" >> $BASH_ENV
                echo "export build_command=\"$build_command\"" >> $BASH_ENV
                echo "export type=\"$type\"" >> $BASH_ENV
                echo "export environment_variables=\"$environment_variables\"" >> $BASH_ENV
                echo "=============================="
              fi
            done

      - run:
          name: Install NVM and Node.js
          command: |
            if [ ! -d "$HOME/.nvm" ]; then
              curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash
            fi
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            nvm install 22.4.1
            nvm use 22.4.1
            echo 'export NVM_DIR="$HOME/.nvm"' >> $BASH_ENV
            echo '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> $BASH_ENV

      - run:
          name: Install Dependencies
          command: |
            npm install node-forge
            npm install --global yarn
            npm install --global pnpm

      - run:
          name: Store Environment Variables
          command: |
            echo "export $environment_variables" > ~/project/.env.ef_circleci


      - run:
          name: Clone Repository
          command: |
            REPO_URL=$url
            REPO_PATH=$(echo $REPO_URL | sed 's#https://github.com/##')

            git clone "$REPO_URL" ~/project/repository

            cd ~/project/repository
            if [ -n $branch ]; then
              git checkout $branch
            else
              echo "No branch specified, staying on default branch."
            fi

      - when:
          condition:
            equal: ["static", $type]
          steps:
            - run:
                name: Build Project
                working_directory: ~/project/repository
                command: |
                  set -e
                  [ -f ~/project/.env ] && source ~/project/.env
                  [ -f ~/project/.env.ef_circleci ] && source ~/project/.env.ef_circleci
                  [ -n $build_dir ] && cd $build_dir
                  [ -n $package_install_command ] && eval $package_install_command
                  eval $build_command

      - when:
          condition:
            equal: ["nextjs", $type]
          steps:
            - run:
                name: Build Next.js Project
                working_directory: ~/project/repository
                command: |
                  set -e

                  # Function to log messages
                  log() {
                    echo "$(date +'%Y-%m-%d %H:%M:%S') - $1"
                  }

                  # Load environment variables
                  log "Loading environment variables..."
                  [ -f ~/project/.env ] && source ~/project/.env
                  [ -f ~/project/.env.ef_circleci ] && source ~/project/.env.ef_circleci

                  # Change to the specified build directory if provided
                  if [ -n $build_dir ]; then
                    log "Changing to build directory: $build_dir"
                    cd $build_dir
                  fi

                  # Install dependencies
                  if [ -n $package_install_command ]; then
                    log "Installing dependencies..."
                    eval "NEXT_PRIVATE_STANDALONE=true $package_install_command"
                  else
                    log "Error: PACKAGE_INSTALL_COMMAND is not set. Exiting."
                    exit 1
                  fi

                  # Build the project
                  if [ -n $build_command ]; then
                    log "Building the project..."
                    eval "NEXT_PRIVATE_STANDALONE=true $build_command"
                  else
                    log "Error: BUILD_COMMAND is not set. Exiting."
                    exit 1
                  fi

                  # Create output directory
                  log "Creating output directories..."
                  mkdir -p output output/public output/.next output/node_modules

                  # Move necessary files from standalone to output
                  log "Moving files to output directory..."
                  mv .next/standalone/* output/
                  mv .next/standalone/.next output/
                  mv .next/static/ output/.next/
                  mv public/* output/public/

                  log "Listing contents of output directory:"
                  ls -A1 output/

                  # Set OUTPUT_DIR to output
                  echo "export OUTPUT_DIR=output" >> $BASH_ENV

      - when:
          condition:
            equal: ["static", $type]
          steps:
            - run:
                name: Check for index.html
                working_directory: ~/project/repository
                command: |
                  OUTPUT_DIR=.
                  if [ -n $output_dir ]; then
                    OUTPUT_DIR=$output_dir
                  fi
                  if [ -f "$OUTPUT_DIR/index.html" ]; then
                    echo "index.html found in $OUTPUT_DIR"
                  else
                    echo "Error: index.html not found in $OUTPUT_DIR"
                    exit 1
                  fi

      - run:
          name: Create Earthfast Bundle
          working_directory: ~/project
          command: |
            # Check if FRAMEWORK is 'nextjs' and set OUTPUT_DIR accordingly
            if [ $type = "nextjs" ]; then
              OUTPUT_DIR="output"
            else
              OUTPUT_DIR=$output_dir
            fi

            BUNDLE_PATH="${OUTPUT_DIR:+repository/$OUTPUT_DIR}"
            BUNDLE_PATH="${BUNDLE_PATH:-repository}"

            bundle_filename="$(npx --package=earthfast-cli@0.10.2 --yes earthfast bundle create earthfast-bundle "$BUNDLE_PATH")"
            checksum="$(npx --package=earthfast-cli@0.10.2 --yes earthfast bundle checksum $bundle_filename)"

            echo $checksum > ~/project/repository/checksum
            echo "Bundle Filename: $bundle_filename"
            echo "Checksum: $checksum"

      - store_artifacts:
          path: earthfast-bundle.tgz
      - store_artifacts:
          path: ~/project/repository/checksum

workflows:
  version: 2
  trigger-pipeline:
    jobs:
      - trigger-circleci:
          filters:
            branches:
              only: main
